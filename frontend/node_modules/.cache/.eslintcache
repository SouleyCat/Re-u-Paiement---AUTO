[{"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\index.js":"1","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\App.js":"3","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\ReceiptForm.js":"4","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\ReceiptDetail.js":"5","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Receipt.js":"6","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Receipts.js":"7","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Auth\\Login.js":"8","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Modals\\EditReceiptModal.js":"9"},{"size":582,"mtime":1698669494140,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1698669000044,"results":"12","hashOfConfig":"11"},{"size":1136,"mtime":1704196012939,"results":"13","hashOfConfig":"11"},{"size":7980,"mtime":1707926585166,"results":"14","hashOfConfig":"11"},{"size":5520,"mtime":1707926569646,"results":"15","hashOfConfig":"11"},{"size":4616,"mtime":1707916194666,"results":"16","hashOfConfig":"11"},{"size":10819,"mtime":1707929404376,"results":"17","hashOfConfig":"11"},{"size":3645,"mtime":1704728031556,"results":"18","hashOfConfig":"11"},{"size":2049,"mtime":1703172920483,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"67fwe9",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\index.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\App.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\ReceiptForm.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\ReceiptDetail.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Receipt.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Receipts.js",["48"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport LOGO from 'file:///C:/Users/jules/Downloads/LOGO_CAT.png';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Receipts = () => {\r\n  const [receipts, setReceipts] = useState([]);\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [objetFilter, setObjetFilter] = useState('');\r\n  const [dayFilter, setDayFilter] = useState('');\r\n  const [monthFilter, setMonthFilter] = useState('');\r\n  const [yearFilter, setYearFilter] = useState('');\r\n  const [paymentTypeFilter, setPaymentTypeFilter] = useState('');\r\n  const [classeFilter, setClasseFilter] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    fetchReceipts();\r\n  }, []);\r\n\r\n  const fetchReceipts = async () => {\r\n    try {\r\n      const response = await axios.get('http://172.16.4.46:8000/api/receipts');\r\n      // const response = await axios.get('http://localhost:8000/api/receipts');\r\n\r\n      setReceipts(response.data.receipts);\r\n    } catch (error) {\r\n      console.error('Error fetching receipts:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n\r\n  // const formatDate = (dateString) => {\r\n  //   const options = { year: 'numeric', month: 'long', day: '2-digit' };\r\n  //   const formattedDate = new Date(dateString).toLocaleDateString('fr-FR', options);\r\n  //   return formattedDate;\r\n  // };\r\n\r\n  const formatMonth = (month) => {\r\n    const options = { month: 'long' };\r\n    const formattedMonth = new Date(2022, month - 1, 1).toLocaleDateString('fr-FR', options);\r\n    return formattedMonth;\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await axios.delete(`http://172.16.4.46:8000/api/delete/${id}`);\r\n      // await axios.delete(`http://localhost:8000/api/delete/${id}`);\r\n      setReceipts((prevReceipts) => prevReceipts.filter((receipt) => receipt.id !== id));\r\n    } catch (error) {\r\n      console.error('Error deleting receipt:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const filteredReceipts = receipts.filter((receipt) => {\r\n    const nameMatch = receipt.nomComplet.toLowerCase().includes(nameFilter.toLowerCase());\r\n    const objetMatch = receipt.paymentReason.toLowerCase().includes(objetFilter.toLowerCase());\r\n    const monthMatch = monthFilter ? new Date(receipt.date).getMonth() + 1 === parseInt(monthFilter) : true;\r\n    const dayMatch = dayFilter ? new Date(receipt.date).getDate() === parseInt(dayFilter) : true;\r\n    const yearMatch = yearFilter ? new Date(receipt.date).getFullYear() === parseInt(yearFilter) : true;\r\n    const paymentTypeMatch = paymentTypeFilter ? receipt.paymentType.toLowerCase() === paymentTypeFilter.toLowerCase() : true;\r\n    const classMatch = classeFilter ? receipt.classe.toLowerCase() === classeFilter.toLowerCase() : true;\r\n\r\n    return nameMatch && monthMatch && paymentTypeMatch && classMatch && objetMatch && yearMatch &&dayMatch;\r\n  });\r\n\r\n  // Extract unique values for \"Mois\" and \"Type de Paiement\" filters\r\n  const uniqueMonths = Array.from(new Set(receipts.map((receipt) => new Date(receipt.date).getMonth() + 1)));\r\n  const uniqueYears = Array.from(new Set(receipts.map((receipt) => new Date(receipt.date).getFullYear())));\r\n  const uniqueDays = Array.from(new Set(receipts.map((receipt) => new Date(receipt.date).getDate()))); \r\n  const uniquePaymentTypes = Array.from(new Set(receipts.map((receipt) => receipt.paymentType.toLowerCase())));\r\n  const uniqueClasses = Array.from(new Set(receipts.map((receipt) => receipt.classe.toLowerCase())));\r\n\r\n  return (\r\n    <>\r\n      <header style={{ textAlign: 'center', padding: '20px', backgroundColor: '#f8f9fa' }}>\r\n        <img src={LOGO} alt=\"Logo\" style={{ height: '100px' }} />\r\n        <h1 className=\"mb-4\">Historique de Re√ßus</h1>\r\n      </header>\r\n\r\n      <div className=\"container mt-4 bg-white\">\r\n      <div className=\"col text-end\">\r\n          <Link to=\"/receiptform\" className=\"btn btn-primary\">\r\n            Nouveau\r\n          </Link>\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          {/* Filter inputs */}\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2\">\r\n              <label className=\"form-label\">Rechercher Par Nom</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={nameFilter}\r\n                onChange={(e) => setNameFilter(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <label className=\"form-label\">Classe</label>\r\n              <select\r\n                className=\"form-select\"\r\n                value={classeFilter}\r\n                onChange={(e) => setClasseFilter(e.target.value)}\r\n                style={{ textTransform: 'uppercase' }}\r\n              >\r\n                <option value=\"\">All</option>\r\n                {uniqueClasses.map((classe) => (\r\n                  <option key={classe} value={classe} style={{ textTransform: 'uppercase' }}>\r\n                    {classe}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <label className=\"form-label\">Jour</label>\r\n              <select\r\n                className=\"form-select\"\r\n                value={dayFilter}\r\n                onChange={(e) => setDayFilter(e.target.value)}\r\n              >\r\n                <option value=\"\">Tous</option>\r\n                {[...Array(31)].map((_, index) => (\r\n                  <option key={index + 1} value={index + 1}>\r\n                    {index + 1}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <label className=\"form-label\">Mois</label>\r\n              <select\r\n                className=\"form-select\"\r\n                value={monthFilter}\r\n                onChange={(e) => setMonthFilter(e.target.value)}\r\n                style={{ textTransform: 'uppercase' }}\r\n              >\r\n                <option value=\"\">All</option>\r\n                {uniqueMonths.map((month) => (\r\n                  <option key={month} value={month} style={{ textTransform: 'uppercase' }}>\r\n                    {formatMonth(month)}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <label className=\"form-label\">Annee</label>\r\n              <select\r\n                className=\"form-select\"\r\n                value={yearFilter}\r\n                onChange={(e) => setYearFilter(e.target.value)}\r\n              >\r\n                <option value=\"\">All</option>\r\n                {uniqueYears.map((year) => (\r\n                  <option key={year} value={year}>\r\n                    {year}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <label className=\"form-label\">Rechercher Par Objet</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={objetFilter}\r\n                onChange={(e) => setObjetFilter(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <label className=\"form-label\">Type de Paiement</label>\r\n              <select\r\n                className=\"form-select\"\r\n                value={paymentTypeFilter}\r\n                onChange={(e) => setPaymentTypeFilter(e.target.value)}\r\n                style={{ textTransform: 'uppercase' }}\r\n              >\r\n                <option value=\"\">Tous</option>\r\n                {uniquePaymentTypes.map((paymentType) => (\r\n                  <option key={paymentType} value={paymentType} style={{ textTransform: 'uppercase' }}>\r\n                    {paymentType}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Table */}\r\n        <table className=\"table table-bordered small-table\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th scope=\"col\">NUMERO DOSSIER</th>\r\n              <th scope=\"col\">Nom Complet</th>\r\n              <th scope=\"col\">Classe</th>\r\n              {/* <th scope=\"col\">Date</th> */}\r\n              <th scope=\"col\">Somme</th>\r\n              <th scope=\"col\">Objet</th>\r\n              <th scope=\"col\">Type de Paiement</th>\r\n              <th scope=\"col\" width=\"200\" className=\"text-left\">\r\n                Actions\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {filteredReceipts\r\n            .sort((a, b) => new Date(b.date) - new Date(a.date)) // Sort by date in descending order\r\n            .map((receipt) => (\r\n              <tr key={receipt.id}>\r\n                <th scope=\"row\">{receipt.dossierNumber}</th>\r\n                <td style={{ textTransform: 'uppercase' }}>{receipt.nomComplet}</td>\r\n                <td>{receipt.classe}</td>\r\n                {/* <td>{formatDate(receipt.date)}</td> */}\r\n                <td className=\"individual-amount-cell\">\r\n                  {parseInt(receipt.amount).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")} \r\n                </td>\r\n                <td style={{ textTransform: 'uppercase' }}>{receipt.paymentReason}</td>\r\n                <td style={{ textTransform: 'uppercase' }}>{receipt.paymentType}</td>\r\n                <td>\r\n                  <Link to={`/receipt/${receipt.id}`}>\r\n                    <button type=\"button\" className=\"btn btn-outline-secondary\" style={{ marginLeft: '22px' }}>\r\n                      <FontAwesomeIcon icon={faEye} />\r\n                    </button>\r\n                  </Link>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger btn-sm btn-end\"\r\n                    style={{ marginLeft: '14px' }}\r\n                    onClick={() => handleDelete(receipt.id)}\r\n                  >\r\n                    SUPPRIMER\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td colSpan=\"3\">Total:</td>\r\n              <td className=\"total-amount-cell\">\r\n                <strong>\r\n                {(\r\n                  filteredReceipts.reduce((total, receipt) => total + (parseInt(receipt.amount) || 0), 0)\r\n                ).toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")} FCFA\r\n                </strong>\r\n              </td>\r\n              <td colSpan=\"3\"></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n      </div>\r\n      <br/>\r\n      <br/>\r\n\r\n    </>  \r\n    );\r\n};\r\n\r\nexport default Receipts;\r\n","C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Auth\\Login.js",[],[],"C:\\Users\\jules\\Desktop\\CAT\\Automatisation Projects\\paiement_auto\\frontend\\src\\Components\\Modals\\EditReceiptModal.js",[],[],{"ruleId":"49","severity":1,"message":"50","line":78,"column":9,"nodeType":"51","messageId":"52","endLine":78,"endColumn":19},"no-unused-vars","'uniqueDays' is assigned a value but never used.","Identifier","unusedVar"]